#!/bin/bash
executable="$0"
exe=`basename "$executable"`
thishost=`uname -n | cut -d. -f1`

errs=/tmp/${exe}.errs

TEST_MODE=

confd=/etc/httpd/vhost.d
host=$(uname -n)
VHOST_DIRS="/var/www/vhosts:/var/www/vhosts2"
declare -A confa

################################################################################
# site based configuration entries
################################################################################

################################################################################
myClean(){
    # leave this in for a short time to clear out /tmp on calling hosts
    rm -rf /tmp/*.$$
}
################################################################################
myExit(){
    decho "housecleaning"
    [ "$2" ] && echo "$2"
    if [ -f $errs ]; then
        echo "Found the following errors:"
        cat $errs
    fi

    myClean

    decho "exiting ($1)"

    exit $1
}
################################################################################
# The following collection is likely most current in zfsutil
# Even at that the -o in vecho may not be the best way to do that, ideally update
# v to verbose or gVERBOSE or VERBOSE in everything...
################################################################################
vecho(){
    [ -n "$verbose" -o -n "$v" ] && echo "$@" || return 0
}
################################################################################
decho(){
    [ -n "$debug" ] && echo "debug: " "$@" || return 0
}
################################################################################
# should think about the logic here, because we COULD base a conditional
# ie: techo "would otherwise run_### : ...." ||  run_###
# The || makes more sense ie: do this OR that, but returns are already set to 0 if NOT engaged so it doesn't show as a failure
################################################################################
techo(){
    [ -n "$TEST_MODE" ] && echo "TEST_MODE: " "$@" || return 0
}
################################################################################
# echo to stderr
eecho(){
    echo "$@" 1>&2;
}
################################################################################
deecho(){
    [ -n "$debug" ] && eecho "$@" || return 0
}
################################################################################
# Repeat given char N times using shell function
repeat(){
	local start=1
	local end=${1:-80}
	local str="${2:-=}"
	local range=$(seq $start $end)
	for i in $range ; do echo -n "${str}"; done
}
################################################################################
webusc_help(){
    thelp="/tmp/zfsutil-help.$$"
    echo "$usage"
    echo "  --verbose - verbose output turned on"
    echo "  --debug   - debugging output turned on"
    echo ""
    echo "where subcommand is one of the following:"

    # see if invoked with absolute or relative path
    if [ -x $0 ]; then
        self=$0
    fi

    # check path entries to see about finding
    for pentry in `echo $PATH | tr ':' ' '`
    do
        if [ -f ${pentry}/$exe ]; then
            self=${pentry}/$exe
        fi
    done

    subcommand_prefix="webusc_"
    if [ "$self" ]; then
        sclist=`grep ')' $self | egrep "$subcommand_prefix" | grep -v '(' | cut -d ')' -f 1 | tr -d ' ' | grep -v '^[-*]'`
        echo "" > $thelp
        for sc in $sclist
        do
            printf "  $sc\n"
            #regex="'^#.*${subcommand_prefix}${sc}'"
            #egrep -E $regex $self >> $thelp
            #egrep -E $regex $self
            #echo "$regex"
        done
        cat $thelp
        #regex="^# ${subcommand_prefix}'"
        # would love to set this up to use printf
        egrep "^# ${subcommand_prefix}" $self | sed -e "s/^# ${subcommand_prefix}/  /" > $thelp
    else
        echo "error finding self, PATH must not be set correctly"
    fi
    echo ""
    cat $thelp
    webusc_help_info

}
################################################################################
webusc_help_info(){
    printf ''
}
################################################################################
webusc_apache_wiki_ul(){
    echo "** enabled sites:"
    while read conf; do
        buf=
        #echo "** enabled conf: $conf"
        svname=$(cat $conf | grep -v '^ *#' | grep 'ServerName' | sed -e 's/^.*ServerName  *//' | sort -u)
        docroot=$(cat $conf | grep -v '^ *#' | grep 'DocumentRoot' | sed -e 's/^.*DocumentRoot  *//' | sort -u)
        buf+="*** $svname ([http://$svname http])"

        # see if there is an ssl conf associated with it
        sslconf=$(echo "$conf" | sed -e 's/\.conf$/-le-ssl.conf/')
        if [ -f $sslconf ]; then
            buf+=" ([https://$svname https])"
        fi

        if [ -n "$docroot" ]; then
            buf+=" docroot: $docroot"
        fi

        echo "$buf"


    done < <(find $confd -type f -name '*.conf' | sort | grep -v 'le-ssl')
}
################################################################################
webusc_process_apache_config(){
    conf=$1; shift
    color=$1; shift

    # This is still not setup well for having multiple, different docRoots (which can happen)
    # Maybe provide separate output for each section of the conf file???  Not simple to do though
    # almost need to split the file into sections in that case
    #    csplit  ../00web5.msi.ucsb.edu.conf '/^<VirtualHost.*>.*$/' '{*}'
    sites=$(cat ${conf} | grep -v '^ *#' | grep 'ServerName' | sed -e 's/^.*ServerName  *//' | sort -u)
    confDocroot=$(cat ${conf} | grep -v '^ *#' | grep 'DocumentRoot' | sed -e 's/^.*DocumentRoot  *//' | sort -u | sed ':a;N;$!ba;s/\n/<br>/g')

    # when retired the sites docroot may have moved, so lets do a quick search for where it should be
    decho "confDocroot: ${confDocroot}"
    docroot=
    if [ -d "${confDocroot}" ]; then
        docroot=${confDocroot}
    else
        for alt in .zRetired .zMigrated; do
            altDocroot=$(echo ${confDocroot} | sed -E -e 's:/var/www/vhosts([^/]*)/(.*$):/var/www/vhosts\1/'$alt'/\2:')
            decho "altDocroot: ${altDocroot}"
            [ -d "${altDocroot}" ] && { docroot="${altDocroot}"; break; }
        done
    fi
    decho "docroot: $docroot"

    svnamesCount=$(echo "${sites}" | wc -l | tr -d ' ')
    if [ ${svnamesCount} -eq 1 ]; then
        site=$sites
        links="[http://$site http] "
    else
        # see if we have an https def in same file
        portShavedName=$(echo "$sites" | sed -e 's/:443$//' | sort | uniq)
        portShavedCount=$(echo "${portShavedName}" | wc -l | tr -d ' ')

        if [ ${portShavedCount} -eq 1 ]; then
            site=${portShavedName}
            links="[http://$site http] "
            links+=" ([https://$site https])"
        else
            echo "Not sure what to do"
        fi
    fi

    # see if there is an ssl conf associated with it
    sslconf=$(echo "$conf" | sed -e 's/\.conf$/-le-ssl.conf/')
    if [ -f $sslconf ]; then
        links+=" ([https://$site https])"
    fi

    confa['#']="${cntr}"
    confa['site']="<span style=\"color: $color;\">${site}</span>"
    confa['docroot']="${docroot}"
    confa['links']="${links}"

    #vwv="/var/www/vhosts/$site"
    # original was not best way to locate .grit folder if we are moving stuff around
    start="${docroot}"
    grit=
    while [ "${start}" != "/" -a "${start}" != "" ]; do
        ckgrit="${start}/.grit"
        decho "checking .grit path: $ckgrit"
        [ -d "${ckgrit}" ] && { grit="${ckgrit}"; break; }
        start=$(dirname "${start}")
    done
    # for vwv in $(find /var/www -maxdepth 1 -type d -name 'vhosts*'); do
    #     grit="${vwv}/${site}/.grit"
    #     [ -d "${grit}" ] && { decho "found grit dir for site: $grit"; break; }
    # done


    for f in $gritFields; do
        confa[$f]=
    done

    if [ -d "${grit}" ]; then
        for f in $gritFields; do
            varname=grit_${f}
            # echo "varname: $varname, ${grit}/${f}"
            [ -f "${grit}/${f}" ] &&  confa[$f]=$(cat "${grit}/${f}" | sed ':a;N;$!ba;s/\n/<br>/g')
        done
    fi

    echo "|-"

    sep='|'
    for f in $dispFields; do
        printf "${sep}${confa[$f]}"
        sep='||'
    done
    printf "\n"

}
webusc_process_nginx_config_chunk(){
    conf=$1; shift
    color=$1; shift
}
################################################################################
webusc_process_nginx_config_file(){
    conf=$1; shift
    color=$1; shift

    chunkdir=/tmp/webutil/chunks

    # This is still not setup well for having multiple, different docRoots (which can happen)
    # Maybe provide separate output for each section of the conf file???  Not simple to do though
    # almost need to split the file into sections in that case
    mkdir -p ${chunkdir}  || myExit 1 "failed to create ${chunkdir}"
    cd ${chunkdir} || myExit 1 "failed to cd to ${chunkdir}"
    csplit $conf '/^server.*$/' '{*}'
    while read chunk; do
        decho "# processing chunkfile: $chunk"


    done < <(find ${chunkdir} -type f -name 'xx*')
    sites=$(cat ${conf} | grep -v '^ *#' | grep 'server' | sed -e 's/^.*server  *//' | sort -u)
    confDocrootCount=$(cat ${conf} | grep -v '^ *#' | grep ' root ' | sed -e 's/^.*DocumentRoot  *//' | sort -u | sed ':a;N;$!ba;s/\n/<br>/g')
    confDocroot=$(cat ${conf} | grep -v '^ *#' | grep 'DocumentRoot' | sed -e 's/^.*DocumentRoot  *//' | sort -u | sed ':a;N;$!ba;s/\n/<br>/g')

    # if we have more than one root, lets split on servers


    # when retired the sites docroot may have moved, so lets do a quick search for where it should be
    decho "confDocroot: ${confDocroot}"
    docroot=
    if [ -d "${confDocroot}" ]; then
        docroot=${confDocroot}
    else
        for alt in .zRetired .zMigrated; do
            altDocroot=$(echo ${confDocroot} | sed -E -e 's:/var/www/vhosts([^/]*)/(.*$):/var/www/vhosts\1/'$alt'/\2:')
            decho "altDocroot: ${altDocroot}"
            [ -d "${altDocroot}" ] && { docroot="${altDocroot}"; break; }
        done
    fi
    decho "docroot: $docroot"

    svnamesCount=$(echo "${sites}" | wc -l | tr -d ' ')
    if [ ${svnamesCount} -eq 1 ]; then
        site=$sites
        links="[http://$site http] "
    else
        # see if we have an https def in same file
        portShavedName=$(echo "$sites" | sed -e 's/:443$//' | sort | uniq)
        portShavedCount=$(echo "${portShavedName}" | wc -l | tr -d ' ')

        if [ ${portShavedCount} -eq 1 ]; then
            site=${portShavedName}
            links="[http://$site http] "
            links+=" ([https://$site https])"
        else
            echo "Not sure what to do"
        fi
    fi

    # see if there is an ssl conf associated with it
    sslconf=$(echo "$conf" | sed -e 's/\.conf$/-le-ssl.conf/')
    if [ -f $sslconf ]; then
        links+=" ([https://$site https])"
    fi

    confa['#']="${cntr}"
    confa['site']="<span style=\"color: $color;\">${site}</span>"
    confa['docroot']="${docroot}"
    confa['links']="${links}"

    #vwv="/var/www/vhosts/$site"
    # original was not best way to locate .grit folder if we are moving stuff around
    start="${docroot}"
    grit=
    while [ "${start}" != "/" -a "${start}" != "" ]; do
        ckgrit="${start}/.grit"
        decho "checking .grit path: $ckgrit"
        [ -d "${ckgrit}" ] && { grit="${ckgrit}"; break; }
        start=$(dirname "${start}")
    done
    # for vwv in $(find /var/www -maxdepth 1 -type d -name 'vhosts*'); do
    #     grit="${vwv}/${site}/.grit"
    #     [ -d "${grit}" ] && { decho "found grit dir for site: $grit"; break; }
    # done


    for f in $gritFields; do
        confa[$f]=
    done

    if [ -d "${grit}" ]; then
        for f in $gritFields; do
            varname=grit_${f}
            # echo "varname: $varname, ${grit}/${f}"
            [ -f "${grit}/${f}" ] &&  confa[$f]=$(cat "${grit}/${f}" | sed ':a;N;$!ba;s/\n/<br>/g')
        done
    fi

    echo "|-"

    sep='|'
    for f in $dispFields; do
        printf "${sep}${confa[$f]}"
        sep='||'
    done
    printf "\n"

}
################################################################################
webu_internal_wiki_table_preflight(){
    gritFields="stakeholders notes status"
    dispFields="# site links docroot $gritFields"
    numCols=$(echo "$dispFields" | wc -w | sed 's/ //g')

    # Start new wiki table
    echo "{| class=\"wikitable inventory\""
    echo "!colspan=\"${numCols}\"|${host}: ${label}"
    echo "|-"
    sep='!'
    for fld in $dispFields; do
        printf "${sep}${fld}"
        sep='!!'
    done
    printf "\n"

}
################################################################################
webusc_nginx_wiki_table(){
    label="nginx configuration"
    webu_internal_wiki_table_preflight

    while read conf; do
        decho "# processing nginx conf: $conf"
        ((cntr++))
        #echo "** enabled conf: $conf"
        color='green'
        echo "$conf" | egrep -qi 'retired' && color='red'
        echo "$conf" | egrep -qi 'migrated' && color='orange'

        webusc_process_nginx_config_file "${conf}" "${color}"
    done < <(find /etc/nginx/*.d -type f -name '*.conf' | sort )
}
################################################################################
webusc_apache_wiki_table(){
    label="apache/httpd configuration"
    webu_internal_wiki_table_preflight
    # repeat 80 '#'; echo
    # gritFields="stakeholders notes status"
    # dispFields="# site links docroot $gritFields"
    # numCols=$(echo "$dispFields" | wc -w | sed 's/ //g')
    #
    # # Start new wiki table
    # echo "{| class=\"wikitable inventory\""
    # echo "!colspan=\"${numCols}\"|${host}: ${label}"
    # echo "|-"
    # sep='!'
    # for fld in $dispFields; do
    #     printf "${sep}${fld}"
    #     sep='!!'
    # done
    # printf "\n"

    cntr=0
    # color=green
    while read conf; do
        ((cntr++))
        #echo "** enabled conf: $conf"
        color='green'
        echo "$conf" | egrep -qi 'retired' && color='red'
        echo "$conf" | egrep -qi 'migrated' && color='orange'

        webusc_process_apache_config "${conf}" "${color}"
    done < <(find $confd -type f -name '*.conf' | sort | grep -v 'le-ssl')

    # # Pull retired
    # while read conf; do
    #     ((cntr++))
    #     #echo "** enabled conf: $conf"
    #     webusc_process_apache_config "${conf}"
    # done < <(find $confd -type f -name '*.conf' | sort | grep -v 'le-ssl')
    echo "|}"
}
################################################################################
webusc_all(){
    repeat 80 '#'; echo
    webusc_apache_wiki_table
    echo ""
    echo ""
    webusc_nginx_wiki_table
    repeat 80 '#'; echo
}
################################################################################
webusc_home(){
    printf ''
    printf ''
}
################################################################################
webusc_change_site_status(){
    mode=$1; shift

    case $mode in
        migrate)    modeDir=.zMigrated ; statusMsg="migrated/archived" ;;
        retire)     modeDir=.zRetired  ; statusMsg="retired/archived" ;;
        *)          modeDir=.zNotSetCorrectly ;;
    esac

    for site in "$@"; do
        decho "site: $site"

        # locate conf
        conf=/etc/httpd/vhost.d/${site}.conf
        [ -f ${conf} ] || continue

        for vwv in /var/www/vhosts*; do
            cksite="${vwv}/${site}"
            [ -d $cksite ] && { base=$cksite; break; }
        done

        cdir=/etc/httpd/vhost.d/${modeDir}
        vdir=${vwv}/${modeDir}

        [ -d "${cdir}" ] || { echo "$cdir not found"; exit 2; }
        [ -d "${vdir}" ] || { echo "$vdir not found"; exit 2; }

        echo "echo \"$statusMsg\" > $base/.grit/status"
        echo "cp ${conf} ${base}/"
        echo "mv ${conf} ${cdir}/"
        echo "mv ${base}* ${vdir}/"


        echo "# Dont forget to check /etc/nginx/conf.d/sites.conf for entries related to ${site}"


    done
}
################################################################################
################################################################################

#webusc_apache_wiki_ul

while [ $# -ge 1 ]; do
    case $1 in
        -v)                  v=1 ;;
        --verbose)           v=1 ;;
        --yes)               yes=1 ;;
        -y)                  yes=1 ;;
        -d)                  debug=1 ;;
        --debug)             debug=1 ;;
        --test)              TEST_MODE=1 ;;
        --db=*)              db=$(echo $1 | cut -d '=' -f2) ;;
        -h)                  webusc_help "$@" ; myExit 1 ;;
        --help)              webusc_help "$@" ; myExit 1 ;;
        -*)                  webusc_help "$@" ; myExit 1 ;;
        *)                   break ;;
    esac
    shift
done

if [ $# -eq 0 ]; then
    echo "running default argument: all"
    subcommand='all'
else
    subcommand=$1
    shift
fi

# make sure that any subcommand uses a consistent prefix that can be matched by the aeusc_help system
case $subcommand in
    all)         webusc_all "$@" ;;
    info)        webusc_info "$@" ;;
    home)        webusc_home "$@" ;;
    retire)      webusc_change_site_status "retire" "$@" ;;
    migrate)     webusc_change_site_status "migrate" "$@" ;;
    *)           webusc_help; myExit 1 ;;
esac


myExit 0
